{"version":3,"sources":["components/TimeUnit/TimerColon/TimerColon.module.scss","img/svg/dot.svg","components/PomodoroButtons/ToggleTimeUnit.module.scss","components/QuickStartPanel/QuickStartPanel.module.scss","components/SessionForm/SessionForm.module.scss","components/HistoryPanel/HistoryItem/HistoryItem.module.scss","components/TimeUnit/TimeUnit.module.scss","components/SessionForm/SessionListItem.module.scss","views/HydrappView/HydrappView.module.scss","components/NavBar/NavBar.js","components/HistoryPanel/HistoryItem/HistoryItem.js","components/HistoryPanel/HistoryPanel.js","components/TimeUnit/TimerDisplay/TimerDisplay.js","components/TimeUnit/TimerColon/TimerColon.js","components/TimeUnit/TimerSetButtons/TimerSetButtons.js","components/TimeUnit/TimeUnit.js","components/PomodoroButtons/StartStopButton.js","components/PomodoroButtons/CancelButton.js","components/PomodoroButtons/ToggleTimeUnit.js","components/QuickStartPanel/SessionCountCard.js","components/QuickStartPanel/ProgressArc.js","TimeSetContext.js","components/QuickStartPanel/QuickStartPanel.js","components/ErrorBoundry/ErrorBoundry.js","components/PomodoroButtons/UtilityButton.js","components/SessionForm/SessionListItem.js","components/SessionForm/SessionForm.js","views/SessionsView/SessionsView.js","views/StatsView/StatsView.js","views/HydrappView/HydrappView.js","views/RootView/App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Nav","variant","defaultActiveKey","Item","Link","eventKey","as","to","timeRecalc","timeInSeconds","Math","floor","HistoryItem","title","date","elapsedWorkTimeInSeconds","elapsedRestTimeInSeconds","pausesCount","sessionsCount","handleClose","className","styles","boxShadow","style","width","Toast","onClose","Header","closeLabel","toLocaleDateString","toLocaleTimeString","Body","Row","Col","sm","color","HistoryPanel","props","sortByDate","setState","prevState","historyItemsFromStorage","sort","itemOne","ItemTwo","dateOne","Date","dateTwo","parseInt","getTime","deleteItem","itemToRemove","localStorage","removeItem","filter","item","id","moveDataFromStorageToState","localStoragePomodoros","Object","entries","map","includes","prepareDataForHistoryItem","preparedItem","JSON","parse","dateToParse","state","itemArrived","storageID","prevProps","this","extensiblePropObj","setItem","uuidv4","stringify","console","count","log","ItemsToDisplay","TransitionGroup","length","historyItem","CSSTransition","key","timeout","enter","exit","classNames","Component","TimeDisplay","time","fontSize","TimerColon","Container","Image","timerColonStyles","src","dot","roundedCircle","TimerSetButtons","setTime","ButtonGroup","Button","data-toggle","data-placement","onClick","TimeUnit","children","minutesSet","elapsedTimeInSeconds","justMinutes","timeLeftInSeconds","minutesLeft","secondsLeft","Card","TimerDisplay","StartStopButton","disabled","handleStartStop","Badge","CancelButton","onCancel","ToggleUnit","checkFn","checked","label","type","onChange","checkboxDiv","SessionCountCard","sessionsTotal","currentSession","icon","bg","border","text","Text","ProgressBar","percentToRadian","percent","PI","draw","canvasSize","big","center","lineWidth","middleSquarePosition","dependsOnBigProp","ctx","canvas","current","getContext","clearRect","fillStyle","strokeStyle","beginPath","arc","stroke","React","createRef","ref","backgroundColor","height","defaultProps","TimeSetContext","createContext","displayName","QuickStartPanel","handleIncommingSession","listOfCycles","takeFirstSessionObjectAndUseIt","firstSessionObject","slice","shift","workMinutes","restMinutes","workIcon","restIcon","resetInterval","window","clearInterval","customTimerID","handleCancelTimer","totalElapsedWorkTimeInSeconds","totalElapsedRestTimeInSeconds","workTime","restTime","fetchFn","resetState","handlePauseTimer","isTimeRunning","handleStartTimer","isItWorkTime","setInterval","isItRestTime","isAppReady","userSetsRestTime","workMinutesInSeconds","restMinutesInSeconds","timesAreSetAndAppIsReadyToLaunch","workTImeHasFinishedNowRestTimeBegins","restTimeHasFinishedAndSessionIsOver","itIsWorkTimeAndWorkTimeIsOnDisplay","itIsRestTimeAndRestTimeIsOnDisplay","quickPomodoroHasFinished","readyToStartNewSession","beforeBegin","allSessionsHasFinished","screenIsWideEnough","matchMedia","matches","userWantsToDisplayWorkTime","workprogressInPercent","restprogressInPercent","shouldDisplayWorkTimeUnit","shouldDisplayRestTimeUnit","clocksAreNotTicking","background","Consumer","context","in","target","setWorkTime","setRestTime","ToggleTimeUnit","toggleTimeUnitDisplay","bind","xs","lg","ProgressArc","ErrorBoundry","hasError","error","errorInfo","message","UtilityButton","handleClick","size","SessionListItem","handleRemove","ListGroup","randomIconGenerator","arr","random","workIcons","breakIcons","SessionForm","setTitle","value","addItem","workAndRestTimeIsSet","placeholder","input","cursor","fetchFromSessionForm","SessionsView","StatsView","display","justifyContent","alignItems","HydrappView","hydrapp","container","document","querySelector","water","glassCounter","createElement","toISOString","counter","getItem","addGlassButton","decrementGlassButton","updateDisplay","innerHTML","opacity","setNumberOfGlasses","classList","add","appendChild","addEventListener","runHydrAppCode","hydrApp","App","redirect","that","fetchFromQuickStartPanel","mediaQuery","timeSetFunctions","StrictMode","fluid","pathname","Provider","md","order","exact","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.80ba97e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"timerColonStyles\":\"TimerColon_timerColonStyles__141oB\",\"blink\":\"TimerColon_blink__WJKDJ\"};","module.exports = __webpack_public_path__ + \"static/media/dot.dd0f186c.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ToggleTimeUnit_label__3TOHs\",\"checkboxDiv\":\"ToggleTimeUnit_checkboxDiv__1yUdo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"QuickStartPanel_background__2SPXn\",\"title\":\"QuickStartPanel_title__2cTRc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"SessionForm_label__2xOqU\",\"input\":\"SessionForm_input__1y5A_\",\"background\":\"SessionForm_background__patK7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boxShadow\":\"HistoryItem_boxShadow__1VgdG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boxShadow\":\"TimeUnit_boxShadow__1DoDJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boxShadow\":\"SessionListItem_boxShadow__1smIH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hydrApp\":\"HydrappView_hydrApp__3gpoU\"};","import React from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavBar = () => (\r\n  <Nav variant=\"tabs\" defaultActiveKey=\"/\">\r\n    <Nav.Item>\r\n      <Nav.Link eventKey=\"/\" as={Link} to=\"/\">\r\n        Home\r\n      </Nav.Link>\r\n    </Nav.Item>\r\n    <Nav.Item>\r\n      <Nav.Link eventKey=\"/session\" as={Link} to=\"/session\">\r\n        Set Sessions\r\n      </Nav.Link>\r\n    </Nav.Item>\r\n    <Nav.Item>\r\n      <Nav.Link eventKey=\"/stats\" as={Link} to=\"/stats\">\r\n        Stats\r\n      </Nav.Link>\r\n    </Nav.Item>\r\n    <Nav.Item>\r\n      <Nav.Link eventKey=\"/hydrapp\" as={Link} to=\"/hydrapp\">\r\n        Hydrapp!\r\n      </Nav.Link>\r\n    </Nav.Item>\r\n  </Nav>\r\n);\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Toast, Col, Row } from 'react-bootstrap';\r\nimport styles from './HistoryItem.module.scss';\r\n\r\nfunction timeRecalc(timeInSeconds) {\r\n  const minutes = Math.floor(timeInSeconds / 60);\r\n  const seconds = Math.floor(timeInSeconds % 60);\r\n  return [minutes, seconds];\r\n}\r\n\r\nconst HistoryItem = ({\r\n  title,\r\n  date,\r\n  elapsedWorkTimeInSeconds,\r\n  elapsedRestTimeInSeconds,\r\n  pausesCount,\r\n  sessionsCount,\r\n  handleClose,\r\n}) => {\r\n  return (\r\n    <div className={`my-3 ${styles.boxShadow}`} style={{ width: '330px' }}>\r\n      <Toast onClose={handleClose}>\r\n        <Toast.Header closeLabel={'Close'}>\r\n          <strong className=\"mr-auto\">{title}</strong>\r\n          <strong>{date.toLocaleDateString()}</strong>\r\n          <small>{date.toLocaleTimeString()}</small>\r\n        </Toast.Header>\r\n        <Toast.Body className=\"text-center\">\r\n          <Row>\r\n            <Col sm={6}>\r\n              <small>Work Done:</small>{' '}\r\n              <strong>\r\n                {timeRecalc(elapsedWorkTimeInSeconds)[0]}:\r\n                {timeRecalc(elapsedWorkTimeInSeconds)[1]} min\r\n              </strong>{' '}\r\n            </Col>\r\n            <Col sm={6}>\r\n              <small>Rested:</small>{' '}\r\n              <strong>\r\n                {timeRecalc(elapsedRestTimeInSeconds)[0]}:\r\n                {timeRecalc(elapsedRestTimeInSeconds)[1]} min\r\n              </strong>{' '}\r\n              <br />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm={6}>\r\n              <small className=\"mx-auto\">\r\n                Total Pauses:{' '}\r\n                <strong style={{ color: 'red' }}>{pausesCount}</strong>\r\n              </small>\r\n            </Col>\r\n            <Col sm={6}>\r\n              <small className=\"mx-auto\">\r\n                Total Sessions:{' '}\r\n                <strong style={{ color: 'red' }}>{sessionsCount}</strong>\r\n              </small>\r\n            </Col>\r\n          </Row>\r\n        </Toast.Body>\r\n      </Toast>\r\n    </div>\r\n  );\r\n};\r\n\r\nHistoryItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  date: PropTypes.object.isRequired,\r\n  elapsedWorkTimeInSeconds: PropTypes.number.isRequired,\r\n  elapsedRestTimeInSeconds: PropTypes.number.isRequired,\r\n  pausesCount: PropTypes.number.isRequired,\r\n  sessionsCount: PropTypes.number.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default HistoryItem;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row } from 'react-bootstrap';\r\nimport HistoryItem from './HistoryItem/HistoryItem';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport '../../css/transitions.css';\r\n\r\nexport class HistoryPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      itemArrived: false,\r\n      storageID: 0,\r\n      historyItemsFromStorage: [],\r\n    };\r\n  }\r\n\r\n  sortByDate = () => {\r\n    this.setState((prevState) => {\r\n      const historyItemsFromStorage = prevState.historyItemsFromStorage.sort(\r\n        (itemOne, ItemTwo) => {\r\n          const dateOne = new Date(itemOne.date);\r\n          const dateTwo = new Date(ItemTwo.date);\r\n          return parseInt(dateTwo.getTime()) - parseInt(dateOne.getTime());\r\n        }\r\n      );\r\n      return { historyItemsFromStorage };\r\n    });\r\n  };\r\n\r\n  deleteItem = (itemToRemove) => {\r\n    localStorage.removeItem(itemToRemove);\r\n    this.setState((prevState) => {\r\n      const historyItemsFromStorage = prevState.historyItemsFromStorage.filter(\r\n        (item) => item.id !== itemToRemove\r\n      );\r\n      return { historyItemsFromStorage };\r\n    });\r\n  };\r\n\r\n  moveDataFromStorageToState = () => {\r\n    const localStoragePomodoros = Object.entries(localStorage)\r\n      .map((item) => {\r\n        return item[0].includes('Pomodoro') ? item : null;\r\n      })\r\n      .filter((item) => item);\r\n    this.setState({ historyItemsFromStorage: localStoragePomodoros });\r\n  };\r\n\r\n  prepareDataForHistoryItem = () => {\r\n    this.setState((prevState) => {\r\n      const historyItemsFromStorage = prevState.historyItemsFromStorage.map(\r\n        (item) => {\r\n          const preparedItem = JSON.parse(item[1]);\r\n          let dateToParse = preparedItem.date;\r\n          dateToParse = new Date(dateToParse);\r\n          delete preparedItem.date;\r\n          preparedItem.date = dateToParse;\r\n          preparedItem.id = item[0];\r\n          return preparedItem;\r\n        }\r\n      );\r\n      return { historyItemsFromStorage };\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const propsHasChanged =\r\n      prevProps.elapsedWorkTimeInSeconds !==\r\n      this.props.elapsedWorkTimeInSeconds;\r\n\r\n    if (propsHasChanged) {\r\n      const extensiblePropObj = { ...this.props };\r\n      extensiblePropObj.date = new Date();\r\n\r\n      localStorage.setItem(\r\n        `Pomodoro-Deluxe-${uuidv4()}`,\r\n        JSON.stringify(extensiblePropObj)\r\n      );\r\n      this.setState({ itemArrived: false });\r\n      this.moveDataFromStorageToState();\r\n      this.prepareDataForHistoryItem();\r\n      this.sortByDate();\r\n    }\r\n    console.count('HistoryPanel update');\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.moveDataFromStorageToState();\r\n    this.prepareDataForHistoryItem();\r\n    this.sortByDate();\r\n    console.count('HistoryPanel mount');\r\n    console.log(this.props);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.count('HistoryPanel unmount');\r\n  }\r\n  render() {\r\n    const ItemsToDisplay = this.state.historyItemsFromStorage;\r\n    return (\r\n      <>\r\n        <Row className=\"mt-3\">\r\n          <div className={`mx-auto`}>\r\n            <TransitionGroup>\r\n              {ItemsToDisplay.length\r\n                ? ItemsToDisplay.map((historyItem) => {\r\n                    return (\r\n                      <CSSTransition\r\n                        key={historyItem.id}\r\n                        timeout={{ enter: 800, exit: 500 }}\r\n                        classNames={'historyItem'}\r\n                      >\r\n                        <HistoryItem\r\n                          handleClose={() => {\r\n                            this.deleteItem(historyItem.id);\r\n                          }}\r\n                          key={historyItem.id}\r\n                          {...historyItem}\r\n                        />\r\n                      </CSSTransition>\r\n                    );\r\n                  })\r\n                : null}\r\n            </TransitionGroup>\r\n          </div>\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nHistoryPanel.propTypes = {\r\n  elapsedRestTimeInSeconds: PropTypes.number,\r\n  elapsedWorkTimeInSeconds: PropTypes.number,\r\n  listOfCycles: PropTypes.array,\r\n  pausesCount: PropTypes.number,\r\n  restTime: PropTypes.number,\r\n  sessionsCount: PropTypes.number,\r\n  title: PropTypes.string,\r\n  workTime: PropTypes.number,\r\n};\r\n\r\nexport default HistoryPanel;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nconst TimeDisplay = ({ time }) => (\r\n  <Row style={{ fontSize: '30px' }}>\r\n    <Col className=\"d-flex align-items-sm-center justify-content-sm-center text-dark\">\r\n      {time < 10 ? `0${time}` : time}\r\n    </Col>\r\n  </Row>\r\n);\r\n\r\nTimeDisplay.propTypes = {\r\n  time: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default TimeDisplay;\r\n","import React from 'react';\r\nimport styles from './TimerColon.module.scss';\r\nimport { Image, Container } from 'react-bootstrap';\r\nimport dot from '../../../img/svg/dot.svg';\r\n\r\nconst TimerColon = () => (\r\n  <Container className=\"d-flex flex-column align-items-center\">\r\n    <Image className={styles.timerColonStyles} src={dot} roundedCircle />\r\n    <Image className={styles.timerColonStyles} src={dot} roundedCircle />\r\n  </Container>\r\n);\r\n\r\nexport default TimerColon;\r\n","import React from 'react';\r\nimport { ButtonGroup, Button } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TimerSetButtons = ({ setTime }) => {\r\n  return (\r\n    <ButtonGroup className=\"btn-sm w-50 mx-auto\">\r\n      <Button\r\n        variant=\"dark\"\r\n        data-toggle=\"tooltip\"\r\n        data-placement=\"bottom\"\r\n        title=\"+\"\r\n        onClick={setTime}\r\n      >\r\n        +\r\n      </Button>\r\n      <Button\r\n        variant=\"outline-dark\"\r\n        data-toggle=\"tooltip\"\r\n        data-placement=\"bottom\"\r\n        title=\"-\"\r\n        onClick={setTime}\r\n      >\r\n        -\r\n      </Button>\r\n    </ButtonGroup>\r\n  );\r\n};\r\n\r\nTimerSetButtons.propTypes = {\r\n  setTime: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TimerSetButtons;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Col, Row } from 'react-bootstrap';\r\nimport TimerDisplay from './TimerDisplay/TimerDisplay';\r\nimport TimerColon from './TimerColon/TimerColon';\r\nimport TimerSetButtons from './TimerSetButtons/TimerSetButtons';\r\nimport styles from './TimeUnit.module.scss';\r\n\r\nconst TimeUnit = ({\r\n  children,\r\n  setTime,\r\n  minutesSet,\r\n  elapsedTimeInSeconds,\r\n  justMinutes,\r\n}) => {\r\n  const timeInSeconds = minutesSet * 60;\r\n  const timeLeftInSeconds = timeInSeconds - elapsedTimeInSeconds;\r\n  const minutesLeft = Math.floor(timeLeftInSeconds / 60);\r\n  const secondsLeft = Math.floor(timeLeftInSeconds % 60);\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        className={`p-3 mx-auto my-auto bg-light border border-dark rounded-pill ${styles.boxShadow}`}\r\n      >\r\n        <Row className=\"mx-auto text-uppercase text-dark\">{children}</Row>\r\n        <Row className=\"mx-auto\">\r\n          {justMinutes && (\r\n            <Col>\r\n              <TimerDisplay time={minutesSet > 0 ? minutesSet : 0} />\r\n            </Col>\r\n          )}\r\n          {!justMinutes && (\r\n            <>\r\n              <Col>\r\n                <TimerDisplay time={minutesLeft > 0 ? minutesLeft : 0} />\r\n              </Col>\r\n              <Col className=\"w-25\">\r\n                <TimerColon />\r\n              </Col>\r\n              <Col>\r\n                <TimerDisplay time={secondsLeft > 0 ? secondsLeft : 0} />\r\n              </Col>\r\n            </>\r\n          )}\r\n        </Row>\r\n        <Row>\r\n          <TimerSetButtons setTime={setTime} />\r\n        </Row>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nTimeUnit.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n  setTime: PropTypes.func.isRequired,\r\n  minutesSet: PropTypes.number.isRequired,\r\n  elapsedTimeInSeconds: PropTypes.number,\r\n};\r\n\r\nexport default TimeUnit;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Badge } from 'react-bootstrap';\r\n\r\nconst StartStopButton = ({\r\n  children,\r\n  disabled,\r\n  handleStartStop,\r\n  pausesCount,\r\n}) => {\r\n  return (\r\n    <p>\r\n      <Button\r\n        className={`mt-5 mx-3 ${disabled ? 'disabled' : null}`}\r\n        variant=\"primary\"\r\n        data-toggle=\"tooltip\"\r\n        data-placement=\"top\"\r\n        title=\"Start pomodoro\"\r\n        onClick={disabled ? null : handleStartStop}\r\n      >\r\n        {children}\r\n        <Badge className=\"ml-2\" variant=\"light\">\r\n          {pausesCount}\r\n        </Badge>\r\n      </Button>\r\n    </p>\r\n  );\r\n};\r\n\r\nStartStopButton.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n  onStart: PropTypes.func,\r\n  onPause: PropTypes.func,\r\n  isTimeRunning: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default StartStopButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst CancelButton = ({ children, disabled, onCancel }) => {\r\n  return (\r\n    <p>\r\n      <Button\r\n        className={`mt-5 mx-3 ${disabled ? 'disabled' : null}`}\r\n        variant=\"danger\"\r\n        data-toggle=\"tooltip\"\r\n        data-placement=\"top\"\r\n        title=\"Cancel session\"\r\n        onClick={onCancel}\r\n      >\r\n        {children}\r\n      </Button>\r\n    </p>\r\n  );\r\n};\r\n\r\nCancelButton.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n  onCancel: PropTypes.func,\r\n};\r\n\r\nexport default CancelButton;\r\n","import React from 'react';\r\nimport styles from './ToggleTimeUnit.module.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ToggleUnit = ({ checkFn, children, checked }) => (\r\n  <label className={styles.label}>\r\n    <input type=\"checkbox\" checked={checked} onChange={checkFn} />\r\n    <div className={styles.checkboxDiv} />\r\n    {children}\r\n  </label>\r\n);\r\n\r\nToggleUnit.propTypes = {\r\n  checkFn: PropTypes.func.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n  checked: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default ToggleUnit;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst SessionCountCard = ({ sessionsTotal, currentSession, icon }) => {\r\n  return (\r\n    <Card bg=\"light\" border=\"dark\" text=\"dark\">\r\n      <Card.Body>\r\n        <Card.Text className=\"d-flex justify-content-around align-items-center\">\r\n          <div>\r\n            <span className=\"h3 mx-3\"> {currentSession}</span> /{' '}\r\n            <span className=\"h3 mx-3\">{sessionsTotal}</span>{' '}\r\n          </div>\r\n          <span className=\"h1 text-dark\">{icon}</span>\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nSessionCountCard.propTypes = {\r\n  sessionsTotal: PropTypes.number.isRequired,\r\n  currentSession: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default SessionCountCard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ProgressBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvas = React.createRef();\r\n    this.state = {\r\n      lineWidth: 30,\r\n    };\r\n  }\r\n\r\n  percentToRadian = (percent) => {\r\n    return ((percent * 360) / 100) * (Math.PI / 180);\r\n  };\r\n\r\n  draw = () => {\r\n    const { percent, canvasSize, big = false } = this.props;\r\n    const center = canvasSize / 2;\r\n    const lineWidth = this.state.lineWidth;\r\n    const middleSquarePosition = center - lineWidth / 2;\r\n    const dependsOnBigProp = big ? 2 * lineWidth : lineWidth;\r\n    const ctx = this.canvas.current.getContext('2d');\r\n\r\n    ctx.clearRect(0, 0, 300, 300);\r\n    ctx.fillStyle = 'red';\r\n    ctx.strokeStyle = '#23272B';\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n      center,\r\n      center,\r\n      dependsOnBigProp,\r\n      0,\r\n      this.percentToRadian(percent),\r\n      false\r\n    );\r\n    ctx.lineWidth = dependsOnBigProp;\r\n    ctx.stroke();\r\n    ctx.clearRect(\r\n      middleSquarePosition,\r\n      middleSquarePosition,\r\n      lineWidth,\r\n      lineWidth\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.draw();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.draw();\r\n  }\r\n\r\n  render() {\r\n    const { canvasSize } = this.props;\r\n    return (\r\n      <canvas\r\n        className=\"mx-auto rounded-circle\"\r\n        ref={this.canvas}\r\n        style={{\r\n          border: '15px solid #23272B',\r\n          backgroundColor: 'rgba(255,255,255, .7)',\r\n        }}\r\n        width={canvasSize}\r\n        height={canvasSize}\r\n      ></canvas>\r\n    );\r\n  }\r\n}\r\n\r\nfunction progressPercentage(props, propName, componentName) {\r\n  const isNotNumber = typeof props.percent !== 'number';\r\n  const isNotGreaterThanZero = props.percent < 0;\r\n  const isNotLessThanHundred = props.percent > 100;\r\n  if (\r\n    props[propName] === props.percent &&\r\n    isNotNumber &&\r\n    isNotGreaterThanZero &&\r\n    isNotLessThanHundred\r\n  ) {\r\n    return new Error(\r\n      `Invalid prop '${propName}' issued to component ${componentName} it has to number between 0 - 100 `\r\n    );\r\n  }\r\n}\r\n\r\nProgressBar.defaultProps = {\r\n  className: '',\r\n};\r\n\r\nProgressBar.propTypes = {\r\n  percent: progressPercentage,\r\n  color: PropTypes.exact({\r\n    red: PropTypes.string,\r\n    green: PropTypes.string,\r\n    blue: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from 'react';\r\n\r\nconst TimeSetContext = React.createContext();\r\nTimeSetContext.displayName = TimeSetContext;\r\n\r\nexport default TimeSetContext;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport TimeUnit from '../TimeUnit/TimeUnit';\r\nimport StartStopButton from '../PomodoroButtons/StartStopButton';\r\nimport CancelButton from '../PomodoroButtons/CancelButton';\r\nimport ToggleTimeUnit from '../PomodoroButtons/ToggleTimeUnit';\r\nimport SessionCountCard from './SessionCountCard';\r\nimport ProgressArc from './ProgressArc';\r\nimport styles from './QuickStartPanel.module.scss';\r\n\r\nimport TimeSetContext from '../../TimeSetContext';\r\n\r\nexport class QuickStartPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: 'Quick Pomodoro',\r\n      isAppReady: false,\r\n      isTimeRunning: false,\r\n      isItWorkTime: false,\r\n      isItRestTime: false,\r\n      workMinutes: 0,\r\n      restMinutes: 0,\r\n      pausesCount: 0,\r\n      sessionsCount: 0,\r\n      elapsedWorkTimeInSeconds: 0,\r\n      totalElapsedWorkTimeInSeconds: 0,\r\n      elapsedRestTimeInSeconds: 0,\r\n      totalElapsedRestTimeInSeconds: 0,\r\n      userSetsRestTime: false,\r\n      listOfCycles: [],\r\n    };\r\n    this.customTimerID = null;\r\n  }\r\n  //==================SESSION FORM DATA AREA =================\r\n  handleIncommingSession = () => {\r\n    this.setState({\r\n      title: this.props.title,\r\n      listOfCycles: this.props.listOfCycles,\r\n    });\r\n  };\r\n\r\n  takeFirstSessionObjectAndUseIt = () => {\r\n    this.setState((prevState) => {\r\n      const sessionObjects = this.state.listOfCycles.slice();\r\n      const firstSessionObject = sessionObjects.shift();\r\n      const {\r\n        workMinutes,\r\n        restMinutes,\r\n        workIcon,\r\n        restIcon,\r\n      } = firstSessionObject;\r\n      const sessionsCount = prevState.sessionsCount + 1;\r\n      return {\r\n        workMinutes,\r\n        restMinutes,\r\n        workIcon,\r\n        restIcon,\r\n        sessionsCount,\r\n      };\r\n    });\r\n  };\r\n\r\n  // ========================== TIMER FUNCTIONS ==========================\r\n  resetInterval = () => {\r\n    window.clearInterval(this.customTimerID);\r\n    this.customTimerID = null;\r\n  };\r\n\r\n  resetState() {\r\n    this.setState({\r\n      isAppReady: false,\r\n      isTimeRunning: false,\r\n      isItWorkTime: false,\r\n      isItRestTime: false,\r\n      workMinutes: 0,\r\n      restMinutes: 0,\r\n      pausesCount: 0,\r\n      sessionsCount: 0,\r\n      workIcon: null,\r\n      restIcon: null,\r\n      elapsedWorkTimeInSeconds: 0,\r\n      totalElapsedWorkTimeInSeconds: 0,\r\n      elapsedRestTimeInSeconds: 0,\r\n      totalElapsedRestTimeInSeconds: 0,\r\n      listOfCycles: [],\r\n    });\r\n  }\r\n\r\n  handleCancelTimer = () => {\r\n    const {\r\n      title,\r\n      elapsedWorkTimeInSeconds,\r\n      totalElapsedWorkTimeInSeconds,\r\n      elapsedRestTimeInSeconds,\r\n      totalElapsedRestTimeInSeconds,\r\n      pausesCount,\r\n      sessionsCount,\r\n    } = this.state;\r\n\r\n    const workTime =\r\n      sessionsCount > 0\r\n        ? elapsedWorkTimeInSeconds + totalElapsedWorkTimeInSeconds\r\n        : elapsedWorkTimeInSeconds;\r\n    const restTime =\r\n      sessionsCount > 0\r\n        ? elapsedRestTimeInSeconds + totalElapsedRestTimeInSeconds\r\n        : elapsedRestTimeInSeconds;\r\n\r\n    this.props.fetchFn(title, workTime, restTime, pausesCount, sessionsCount);\r\n\r\n    this.resetState();\r\n    this.resetInterval();\r\n  };\r\n\r\n  handlePauseTimer = () => {\r\n    this.setState((prevState) => ({\r\n      isTimeRunning: false,\r\n      pausesCount: prevState.pausesCount + 1,\r\n    }));\r\n    this.resetInterval();\r\n  };\r\n\r\n  handleStartTimer = () => {\r\n    if (this.customTimerID === null) {\r\n      this.setState({ isTimeRunning: true, isItWorkTime: true });\r\n      this.customTimerID = window.setInterval(() => {\r\n        if (this.state.isItWorkTime) {\r\n          this.setState((prevState) => ({\r\n            elapsedWorkTimeInSeconds: prevState.elapsedWorkTimeInSeconds + 1,\r\n          }));\r\n        }\r\n        if (this.state.isItRestTime && this.state.restMinutes > 0) {\r\n          this.setState((prevState) => ({\r\n            elapsedRestTimeInSeconds: prevState.elapsedRestTimeInSeconds + 1,\r\n          }));\r\n        }\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const {\r\n      title,\r\n      elapsedWorkTimeInSeconds,\r\n      totalElapsedWorkTimeInSeconds,\r\n      elapsedRestTimeInSeconds,\r\n      totalElapsedRestTimeInSeconds,\r\n      pausesCount,\r\n      sessionsCount,\r\n    } = this.state;\r\n\r\n    const workMinutesInSeconds = this.state.workMinutes * 60;\r\n    const restMinutesInSeconds = this.state.restMinutes * 60;\r\n    const timesAreSetAndAppIsReadyToLaunch =\r\n      this.state.workMinutes > 0 &&\r\n      this.state.restMinutes > 0 &&\r\n      this.state.isAppReady === false;\r\n    const workTImeHasFinishedNowRestTimeBegins =\r\n      workMinutesInSeconds === this.state.elapsedWorkTimeInSeconds &&\r\n      this.state.isItWorkTime &&\r\n      this.state.restMinutes > 0;\r\n    const restTimeHasFinishedAndSessionIsOver =\r\n      !this.state.isItWorkTime &&\r\n      this.state.isItRestTime &&\r\n      restMinutesInSeconds === this.state.elapsedRestTimeInSeconds;\r\n    const itIsWorkTimeAndWorkTimeIsOnDisplay =\r\n      this.state.isItWorkTime && this.state.userSetsRestTime;\r\n    const itIsRestTimeAndRestTimeIsOnDisplay =\r\n      this.state.isItRestTime && !this.state.userSetsRestTime;\r\n    const quickPomodoroHasFinished =\r\n      this.state.isItRestTime &&\r\n      restMinutesInSeconds === this.state.elapsedRestTimeInSeconds &&\r\n      title === 'Quick Pomodoro';\r\n\r\n    if (itIsWorkTimeAndWorkTimeIsOnDisplay) {\r\n      this.setState({ userSetsRestTime: false });\r\n    }\r\n    if (itIsRestTimeAndRestTimeIsOnDisplay) {\r\n      this.setState({ userSetsRestTime: true });\r\n    }\r\n\r\n    if (timesAreSetAndAppIsReadyToLaunch) {\r\n      this.setState({ isAppReady: true });\r\n    }\r\n\r\n    if (workTImeHasFinishedNowRestTimeBegins) {\r\n      this.setState({ isItWorkTime: false, isItRestTime: true });\r\n    }\r\n\r\n    if (quickPomodoroHasFinished) {\r\n      this.props.fetchFn(\r\n        title,\r\n        elapsedWorkTimeInSeconds,\r\n        elapsedRestTimeInSeconds,\r\n        pausesCount,\r\n        sessionsCount\r\n      );\r\n      this.resetState();\r\n    }\r\n\r\n    if (restTimeHasFinishedAndSessionIsOver) {\r\n      const { elapsedWorkTimeInSeconds, elapsedRestTimeInSeconds } = this.state;\r\n\r\n      this.setState((prevState) => {\r\n        const totalElapsedWorkTimeInSeconds =\r\n          prevState.totalElapsedWorkTimeInSeconds + elapsedWorkTimeInSeconds;\r\n        const totalElapsedRestTimeInSeconds =\r\n          prevState.totalElapsedRestTimeInSeconds + elapsedRestTimeInSeconds;\r\n        return { totalElapsedWorkTimeInSeconds, totalElapsedRestTimeInSeconds };\r\n      });\r\n\r\n      this.setState({\r\n        isAppReady: false,\r\n        isTimeRunning: false,\r\n        isItWorkTime: false,\r\n        isItRestTime: false,\r\n        workMinutes: 0,\r\n        restMinutes: 0,\r\n        elapsedWorkTimeInSeconds: 0,\r\n        elapsedRestTimeInSeconds: 0,\r\n      });\r\n      this.resetInterval();\r\n    }\r\n\r\n    //==================SESSION FORM DATA PREPARATION AREA =================\r\n    const readyToStartNewSession =\r\n      this.state.listOfCycles.length && this.state.workMinutes === 0;\r\n    const beforeBegin = this.state.sessionsCount === 0;\r\n    const allSessionsHasFinished =\r\n      this.state.sessionsCount > this.props.listOfCycles.length;\r\n\r\n    if (readyToStartNewSession && beforeBegin) {\r\n      this.takeFirstSessionObjectAndUseIt();\r\n    }\r\n\r\n    if (readyToStartNewSession && !beforeBegin) {\r\n      this.takeFirstSessionObjectAndUseIt();\r\n      this.handleStartTimer();\r\n    }\r\n\r\n    if (allSessionsHasFinished) {\r\n      this.props.fetchFn(\r\n        title,\r\n        totalElapsedWorkTimeInSeconds,\r\n        totalElapsedRestTimeInSeconds,\r\n        pausesCount,\r\n        sessionsCount\r\n      );\r\n      this.resetState();\r\n      this.resetInterval();\r\n    }\r\n\r\n    console.count(`QuickStartPanel Update`);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const sessionTitleWasSet = this.state.title !== this.props.title;\r\n\r\n    if (sessionTitleWasSet) {\r\n      this.handleIncommingSession();\r\n    }\r\n\r\n    console.count('QuickStartPanel Mounted');\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.resetState();\r\n    this.resetInterval();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      title,\r\n      isAppReady,\r\n      isTimeRunning,\r\n      workMinutes,\r\n      restMinutes,\r\n      elapsedWorkTimeInSeconds,\r\n      elapsedRestTimeInSeconds,\r\n      userSetsRestTime,\r\n      pausesCount,\r\n      isItWorkTime,\r\n      isItRestTime,\r\n      workIcon,\r\n      restIcon,\r\n    } = this.state;\r\n    const mediaQueryList = window.matchMedia('(max-width: 992px)');\r\n    const screenIsWideEnough = !mediaQueryList.matches;\r\n    const userWantsToDisplayWorkTime = !userSetsRestTime;\r\n\r\n    const workprogressInPercent =\r\n      (elapsedWorkTimeInSeconds / (workMinutes * 60)) * 100.0;\r\n    const restprogressInPercent =\r\n      (elapsedRestTimeInSeconds / (restMinutes * 60)) * 100.0;\r\n\r\n    const shouldDisplayWorkTimeUnit =\r\n      screenIsWideEnough || userWantsToDisplayWorkTime;\r\n    const shouldDisplayRestTimeUnit =\r\n      screenIsWideEnough || !userWantsToDisplayWorkTime;\r\n\r\n    const clocksAreNotTicking = !isItWorkTime && !isItRestTime;\r\n\r\n    return (\r\n      <Container className={`p-3 mt-1 ${styles.background}`}>\r\n        <TimeSetContext.Consumer>\r\n          {(context) => (\r\n            <>\r\n              <h2 className={`text-dark text-center my-3 ${styles.title}`}>\r\n                {title !== 'Quick Pomodoro' ? title : 'Quick Pomodoro'}\r\n              </h2>\r\n              <TransitionGroup>\r\n                <Row>\r\n                  <Col className=\"d-flex\">\r\n                    {shouldDisplayWorkTimeUnit && (\r\n                      <CSSTransition\r\n                        in={shouldDisplayWorkTimeUnit}\r\n                        timeout={700}\r\n                        classNames={'workTimeUnit'}\r\n                      >\r\n                        <TimeUnit\r\n                          minutesSet={workMinutes}\r\n                          elapsedTimeInSeconds={elapsedWorkTimeInSeconds}\r\n                          setTime={\r\n                            clocksAreNotTicking\r\n                              ? ({ target }) =>\r\n                                  context.setWorkTime({ target }, this)\r\n                              : null\r\n                          }\r\n                        >\r\n                          WORK\r\n                        </TimeUnit>\r\n                      </CSSTransition>\r\n                    )}\r\n                    {shouldDisplayRestTimeUnit && (\r\n                      <CSSTransition\r\n                        in={shouldDisplayRestTimeUnit}\r\n                        timeout={700}\r\n                        classNames={'restTimeUnit'}\r\n                      >\r\n                        <TimeUnit\r\n                          minutesSet={restMinutes}\r\n                          elapsedTimeInSeconds={elapsedRestTimeInSeconds}\r\n                          setTime={\r\n                            clocksAreNotTicking\r\n                              ? ({ target }) =>\r\n                                  context.setRestTime({ target }, this)\r\n                              : null\r\n                          }\r\n                        >\r\n                          BREAK\r\n                        </TimeUnit>\r\n                      </CSSTransition>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n              </TransitionGroup>\r\n              <Row>\r\n                <StartStopButton\r\n                  handleStartStop={\r\n                    isAppReady && !isTimeRunning\r\n                      ? this.handleStartTimer\r\n                      : this.handlePauseTimer\r\n                  }\r\n                  pausesCount={pausesCount}\r\n                  isTimeRunning={isTimeRunning}\r\n                  disabled={workMinutes === 0 || restMinutes === 0}\r\n                >\r\n                  {this.state.isTimeRunning\r\n                    ? 'Stop Pomodoro'\r\n                    : 'Start Pomodoro'}\r\n                </StartStopButton>\r\n                <CancelButton\r\n                  disabled={!isAppReady}\r\n                  onCancel={isAppReady ? this.handleCancelTimer : null}\r\n                >\r\n                  Cancel\r\n                </CancelButton>\r\n\r\n                {!screenIsWideEnough && (\r\n                  <ToggleTimeUnit\r\n                    checked={userSetsRestTime}\r\n                    checkFn={context.toggleTimeUnitDisplay.bind(this)}\r\n                  >\r\n                    Set Break\r\n                  </ToggleTimeUnit>\r\n                )}\r\n              </Row>\r\n              <Row>\r\n                <Col\r\n                  xs={workIcon ? 6 : 0}\r\n                  lg={workIcon ? 4 : 0}\r\n                  className=\"p-3\"\r\n                >\r\n                  {this.props.listOfCycles.length > 0 && (\r\n                    <SessionCountCard\r\n                      sessionsTotal={this.props.listOfCycles.length}\r\n                      currentSession={this.state.sessionsCount}\r\n                      icon={isItRestTime ? restIcon : workIcon}\r\n                    />\r\n                  )}\r\n                </Col>\r\n                <Col\r\n                  xs={workIcon ? 6 : 12}\r\n                  lg={workIcon ? 8 : 12}\r\n                  className=\"mx-auto text-center\"\r\n                >\r\n                  <ProgressArc\r\n                    percent={\r\n                      this.state.isItWorkTime\r\n                        ? workprogressInPercent\r\n                        : restprogressInPercent\r\n                    }\r\n                    canvasSize={screenIsWideEnough ? 250 : workIcon ? 100 : 160}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </>\r\n          )}\r\n        </TimeSetContext.Consumer>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nQuickStartPanel.propTypes = {\r\n  elapsedRestTimeInSeconds: PropTypes.number,\r\n  elapsedWorkTimeInSeconds: PropTypes.number,\r\n  listOfCycles: PropTypes.array,\r\n  pausesCount: PropTypes.number,\r\n  restTime: PropTypes.number,\r\n  sessionsCount: PropTypes.number,\r\n  title: PropTypes.string,\r\n  workTime: PropTypes.number,\r\n};\r\n\r\nexport default QuickStartPanel;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    console.log('Wystąpił błąd ', error, errorInfo);\r\n  }\r\n  render() {\r\n    const { message, children } = this.props;\r\n    return this.state.hasError ? message : children;\r\n  }\r\n}\r\n\r\nErrorBoundry.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  children: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default ErrorBoundry;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst UtilityButton = ({ children, handleClick, variant, size }) => {\r\n  return (\r\n    <p>\r\n      <Button size={size} variant={variant} onClick={handleClick}>\r\n        {children}\r\n      </Button>\r\n    </p>\r\n  );\r\n};\r\n\r\nUtilityButton.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n  handleClick: PropTypes.func,\r\n  size: PropTypes.string,\r\n};\r\n\r\nexport default UtilityButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport styles from './SessionListItem.module.scss';\r\n\r\nconst SessionListItem = ({\r\n  workMinutes,\r\n  restMinutes,\r\n  workIcon,\r\n  restIcon,\r\n  handleRemove,\r\n}) => {\r\n  return (\r\n    <>\r\n      <ListGroup.Item\r\n        className={`d-flex justify-content-around ${styles.boxShadow}`}\r\n        onClick={handleRemove}\r\n      >\r\n        <span>\r\n          <span style={{ fontSize: '40px' }}>{workIcon}</span> Work Time:{' '}\r\n          <strong className=\"h2 text-danger\">{workMinutes}</strong>\r\n        </span>{' '}\r\n        <span>\r\n          <span style={{ fontSize: '40px' }}>{restIcon}</span> Break Time:{' '}\r\n          <strong className=\"h2 text-danger\">{restMinutes}</strong>\r\n        </span>\r\n      </ListGroup.Item>\r\n    </>\r\n  );\r\n};\r\n\r\nSessionListItem.propTypes = {\r\n  workMinutes: PropTypes.number.isRequired,\r\n  restMinutes: PropTypes.number.isRequired,\r\n  workIcon: PropTypes.element.isRequired,\r\n  restIcon: PropTypes.element.isRequired,\r\n  handleRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SessionListItem;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row, Col, ListGroup } from 'react-bootstrap';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport TimeUnit from '../TimeUnit/TimeUnit';\r\nimport ToggleTimeUnit from '../PomodoroButtons/ToggleTimeUnit';\r\nimport UtilityButton from '../PomodoroButtons/UtilityButton';\r\nimport SessionListItem from './SessionListItem';\r\n\r\nimport TimeSetContext from '../../TimeSetContext';\r\n\r\nimport styles from './SessionForm.module.scss';\r\nimport {\r\n  GiBiceps,\r\n  GiBoatFishing,\r\n  GiArmorUpgrade,\r\n  GiAmericanFootballBall,\r\n  GiBeachBucket,\r\n  GiCroissant,\r\n  GiCoins,\r\n  GiHighKick,\r\n  GiPodium,\r\n  GiPush,\r\n  GiSunglasses,\r\n  GiAtom,\r\n  GiTeslaTurret,\r\n  GiSnail,\r\n} from 'react-icons/gi';\r\n\r\nfunction randomIconGenerator(arr) {\r\n  const random = Math.floor(Math.random() * arr.length);\r\n\r\n  return arr[random];\r\n}\r\n\r\nconst workIcons = [\r\n  <GiBiceps />,\r\n  <GiArmorUpgrade />,\r\n  <GiCoins />,\r\n  <GiHighKick />,\r\n  <GiPodium />,\r\n  <GiPush />,\r\n  <GiAtom />,\r\n];\r\nconst breakIcons = [\r\n  <GiBoatFishing />,\r\n  <GiAmericanFootballBall />,\r\n  <GiBeachBucket />,\r\n  <GiCroissant />,\r\n  <GiSunglasses />,\r\n  <GiTeslaTurret />,\r\n  <GiSnail />,\r\n];\r\n\r\nexport class SessionForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      title: '',\r\n      listOfCycles: [],\r\n      workMinutes: 0,\r\n      restMinutes: 0,\r\n      userSetsRestTime: false,\r\n    };\r\n  }\r\n\r\n  setTitle = ({ target }) => {\r\n    this.setState({ title: target.value });\r\n  };\r\n\r\n  addItem = () => {\r\n    this.setState((prevState) => {\r\n      const listOfCycles = [\r\n        ...prevState.listOfCycles,\r\n        {\r\n          id: uuidv4(),\r\n          workMinutes: this.state.workMinutes,\r\n          restMinutes: this.state.restMinutes,\r\n          workIcon: randomIconGenerator(workIcons),\r\n          restIcon: randomIconGenerator(breakIcons),\r\n        },\r\n      ];\r\n      const workMinutes = 0;\r\n      const restMinutes = 0;\r\n      return { listOfCycles, workMinutes, restMinutes };\r\n    });\r\n  };\r\n\r\n  removeItem = (itemToRemove) => {\r\n    this.setState((prevState) => {\r\n      const listOfCycles = prevState.listOfCycles.filter(\r\n        (item) => item.id !== itemToRemove\r\n      );\r\n      return { listOfCycles };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      userSetsRestTime,\r\n      title,\r\n      listOfCycles,\r\n      workMinutes,\r\n      restMinutes,\r\n    } = this.state;\r\n    const mediaQuery = window.matchMedia('(max-width: 992px)');\r\n    const screenIsWideEnough = !mediaQuery.matches;\r\n    const userWantsToDisplayWorkTime = !userSetsRestTime;\r\n    const shouldDisplayWorkTimeUnit =\r\n      screenIsWideEnough || userWantsToDisplayWorkTime;\r\n    const shouldDisplayRestTimeUnit =\r\n      screenIsWideEnough || !userWantsToDisplayWorkTime;\r\n    const workAndRestTimeIsSet = workMinutes > 0 && restMinutes > 0;\r\n\r\n    return (\r\n      <Container className={`p-3 mt-1 mb-2 ${styles.background}`}>\r\n        <TimeSetContext.Consumer>\r\n          {(context) => (\r\n            <>\r\n              <Row className=\"d-flex justify-content-center\">\r\n                <Col xs={12} lg={6}>\r\n                  <input\r\n                    placeholder=\"Session Name\"\r\n                    className={`text-center ${styles.input}`}\r\n                    onChange={this.setTitle}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <TransitionGroup>\r\n                <Row className=\"d-flex justify-content-center my-3\">\r\n                  <Col xs={8} className=\"col-sm-7 col-lg-3\">\r\n                    {shouldDisplayWorkTimeUnit && (\r\n                      <CSSTransition\r\n                        in={shouldDisplayWorkTimeUnit}\r\n                        timeout={700}\r\n                        classNames={'workTimeUnit'}\r\n                      >\r\n                        <TimeUnit\r\n                          justMinutes\r\n                          setTime={({ target }) =>\r\n                            context.setWorkTime({ target }, this)\r\n                          }\r\n                          minutesSet={workMinutes}\r\n                        >\r\n                          Work\r\n                        </TimeUnit>\r\n                      </CSSTransition>\r\n                    )}\r\n                  </Col>\r\n                  <Col xs={8} className=\"col-sm-7 col-lg-3\">\r\n                    {shouldDisplayRestTimeUnit && (\r\n                      <CSSTransition\r\n                        in={shouldDisplayRestTimeUnit}\r\n                        timeout={700}\r\n                        classNames={'restTimeUnit'}\r\n                      >\r\n                        <TimeUnit\r\n                          justMinutes\r\n                          setTime={({ target }) =>\r\n                            context.setRestTime({ target }, this)\r\n                          }\r\n                          minutesSet={restMinutes}\r\n                        >\r\n                          Break\r\n                        </TimeUnit>\r\n                      </CSSTransition>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n              </TransitionGroup>\r\n              <Row className=\"d-flex justify-content-around align-items-center my-3\">\r\n                <UtilityButton\r\n                  handleClick={workAndRestTimeIsSet ? this.addItem : null}\r\n                  size={'lg'}\r\n                  variant={'outline-primary'}\r\n                >\r\n                  Add Cycle\r\n                </UtilityButton>\r\n                {!screenIsWideEnough && (\r\n                  <ToggleTimeUnit\r\n                    checked={userSetsRestTime}\r\n                    checkFn={context.toggleTimeUnitDisplay.bind(this)}\r\n                  >\r\n                    Set Break\r\n                  </ToggleTimeUnit>\r\n                )}\r\n              </Row>\r\n              <Row className=\"d-flex justify-content-center text-center\">\r\n                <Col\r\n                  className=\"overflow-auto col-lg-6\"\r\n                  style={{ height: '190px' }}\r\n                >\r\n                  <ListGroup style={{ cursor: 'pointer' }}>\r\n                    <TransitionGroup>\r\n                      {listOfCycles.map((item) => (\r\n                        <CSSTransition\r\n                          key={item.id}\r\n                          timeout={{ enter: 300, exit: 200 }}\r\n                          classNames={'sessionListItem'}\r\n                        >\r\n                          <SessionListItem\r\n                            handleRemove={() => {\r\n                              this.removeItem(item.id);\r\n                            }}\r\n                            key={item.id}\r\n                            {...item}\r\n                          />\r\n                        </CSSTransition>\r\n                      ))}\r\n                    </TransitionGroup>\r\n                  </ListGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"d-flex justify-content-around align-items-center my-3\">\r\n                <UtilityButton\r\n                  handleClick={\r\n                    title !== '' && listOfCycles.length\r\n                      ? () => context.fetchFromSessionForm(title, listOfCycles)\r\n                      : null\r\n                  }\r\n                  size={'lg'}\r\n                  variant={'primary'}\r\n                >\r\n                  {title !== '' && listOfCycles.length\r\n                    ? 'Complete Session'\r\n                    : 'Set Session Parameters'}\r\n                </UtilityButton>\r\n              </Row>\r\n            </>\r\n          )}\r\n        </TimeSetContext.Consumer>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SessionForm;\r\n","import React from 'react';\r\nimport SessionForm from '../../components/SessionForm/SessionForm';\r\n\r\nconst SessionsView = () => {\r\n  return (\r\n    <>\r\n      <SessionForm />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SessionsView;\r\n","import React from 'react';\r\nimport { VscExclude } from 'react-icons/vsc';\r\n\r\nconst StatsView = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        fontSize: '100px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100%',\r\n      }}\r\n    >\r\n      Work in progress\r\n      <VscExclude />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatsView;\r\n","import React, { Component } from 'react';\r\nimport styles from './HydrappView.module.scss';\r\n\r\nexport class HydrappView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.hydrapp = React.createRef();\r\n    this.state = {};\r\n  }\r\n\r\n  runHydrAppCode() {\r\n    const container = document.querySelector('.app__glass');\r\n    const water = document.querySelector('.app__glass_total--water');\r\n    let glassCounter = document.createElement('div');\r\n\r\n    const key = `HydrApp-${new Date().toISOString().slice(0, 10)}`;\r\n    let counter = key ? localStorage.getItem(key) : 0;\r\n\r\n    const addGlassButton = document.querySelector('.app__increment--js');\r\n    const decrementGlassButton = document.querySelector('.app__decrement--js');\r\n\r\n    glassCounter.classList.add('app__counter');\r\n\r\n    function updateDisplay() {\r\n      glassCounter.innerHTML = localStorage.getItem(key);\r\n      water.style.opacity = 0.1 * counter;\r\n    }\r\n\r\n    function checkOnLoad() {\r\n      if (localStorage.getItem(key)) {\r\n        updateDisplay();\r\n      }\r\n      if (!localStorage.getItem(key)) {\r\n        glassCounter.innerHTML = 0;\r\n        water.style.opacity = 0;\r\n      }\r\n    }\r\n\r\n    function setNumberOfGlasses() {\r\n      localStorage.setItem(key, counter);\r\n    }\r\n\r\n    function handleIncrementCounterButton() {\r\n      counter++;\r\n      setNumberOfGlasses();\r\n      updateDisplay();\r\n    }\r\n\r\n    function handledecrementCounterButton() {\r\n      counter--;\r\n      if (counter < 0) counter = 0;\r\n      setNumberOfGlasses();\r\n      updateDisplay();\r\n    }\r\n\r\n    checkOnLoad();\r\n    container.appendChild(glassCounter);\r\n\r\n    addGlassButton.addEventListener('click', handleIncrementCounterButton);\r\n    decrementGlassButton.addEventListener(\r\n      'click',\r\n      handledecrementCounterButton\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.hydrapp.current.innerHTML = `<main class=\"app\">\r\n    <h1 class=\"app__title\">HydrApp</h1>\r\n    <div class=\"app__glass\">\r\n      <svg\r\n        width=\"280\"\r\n        height=\"280\"\r\n        viewBox=\"0 0 280 280\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        class=\"app__glass_total\"\r\n      >\r\n        <path\r\n          d=\"M242.748 2.8875C241.085 1.05 238.74 0 236.255 0H43.7555C41.288 0 38.9255 1.05 37.263 2.8875C35.618 4.7075 34.7955 7.1575 35.0405 9.625L61.2905 272.125C61.7455 276.605 65.508 280 70.0055 280H210.005C214.503 280 218.265 276.605 218.703 272.125L244.953 9.625C245.215 7.1575 244.41 4.7075 242.748 2.8875Z\"\r\n          fill=\"#ECEFF1\"\r\n          class=\"app__glass_total--glass\"\r\n        />\r\n        <path\r\n          d=\"M219.455 89.25L202.13 262.5H77.8805L58.4555 68.775C80.3305 61.775 113.58 57.05 140.005 78.75C165.555 99.75 197.755 95.9 219.455 89.25Z\"\r\n          fill=\"#2196F3\"\r\n          class=\"app__glass_total--water\"\r\n        />\r\n      </svg>\r\n    </div>\r\n    <button class=\"app__increment app__increment--js\">dodaj szklankę</button>\r\n    <button class=\"app__decrement app__decrement--js\">\r\n      odejmij szklankę\r\n    </button>\r\n  </main>`; // el dom któey mnie interesuje\r\n    this.runHydrAppCode();\r\n  }\r\n\r\n  render() {\r\n    return <div className={styles.hydrApp} ref={this.hydrapp}></div>;\r\n  }\r\n}\r\n\r\nexport default HydrappView;\r\n","import React from 'react';\r\nimport NavBar from '../../components/NavBar/NavBar';\r\nimport HistoryPanel from '../../components/HistoryPanel/HistoryPanel';\r\nimport QuickStartPanel from '../../components/QuickStartPanel/QuickStartPanel';\r\nimport ErrorBoundry from '../../components/ErrorBoundry/ErrorBoundry';\r\nimport SessionsView from '../SessionsView/SessionsView';\r\nimport StatsView from '../StatsView/StatsView';\r\nimport HydrappView from '../HydrappView/HydrappView';\r\n\r\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\r\nimport TimeSetContext from '../../TimeSetContext';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    title: 'Quick Pomodoro',\r\n    workTime: 0,\r\n    restTime: 0,\r\n    elapsedWorkTimeInSeconds: 0,\r\n    elapsedRestTimeInSeconds: 0,\r\n    pausesCount: 0,\r\n    sessionsCount: 0,\r\n    listOfCycles: [],\r\n    redirect: true,\r\n  };\r\n\r\n  setWorkTime = ({ target }, that) => {\r\n    target.title === '+'\r\n      ? that.setState({ workMinutes: that.state.workMinutes + 5 })\r\n      : that.state.workMinutes > 0\r\n      ? that.setState({ workMinutes: that.state.workMinutes - 5 })\r\n      : that.setState({ workMinutes: 0 });\r\n  };\r\n\r\n  setRestTime = ({ target }, that) => {\r\n    target.title === '+'\r\n      ? that.setState({ restMinutes: that.state.restMinutes + 2 })\r\n      : that.state.restMinutes > 0\r\n      ? that.setState({ restMinutes: that.state.restMinutes - 2 })\r\n      : that.setState({ restMinutes: 0 });\r\n  };\r\n\r\n  toggleTimeUnitDisplay() {\r\n    this.setState((prevState) => ({\r\n      userSetsRestTime: !prevState.userSetsRestTime,\r\n    }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.count('App mount');\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.count('App update');\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.count('App mount');\r\n  }\r\n\r\n  fetchFromQuickStartPanel = (\r\n    title,\r\n    elapsedWorkTimeInSeconds,\r\n    elapsedRestTimeInSeconds,\r\n    pausesCount,\r\n    sessionsCount\r\n  ) => {\r\n    sessionsCount = sessionsCount <= 0 ? 0 : sessionsCount - 1;\r\n    this.setState({\r\n      title,\r\n      elapsedWorkTimeInSeconds,\r\n      elapsedRestTimeInSeconds,\r\n      pausesCount,\r\n      sessionsCount,\r\n      listOfCycles: [],\r\n    });\r\n  };\r\n\r\n  fetchFromSessionForm = (title, listOfCycles) => {\r\n    this.setState({ title, listOfCycles });\r\n  };\r\n\r\n  render() {\r\n    const mediaQuery = window.matchMedia('(max-width: 992px)');\r\n    const timeSetFunctions = {\r\n      setWorkTime: this.setWorkTime,\r\n      setRestTime: this.setRestTime,\r\n      toggleTimeUnitDisplay: this.toggleTimeUnitDisplay,\r\n      fetchFromSessionForm: this.fetchFromSessionForm,\r\n    };\r\n    return (\r\n      <React.StrictMode>\r\n        <>\r\n          <Container\r\n            fluid\r\n            className={`${!mediaQuery.matches ? 'vh-100' : ''} p-4`}\r\n          >\r\n            <BrowserRouter>\r\n              <>\r\n                <Redirect to={{ pathname: '/', state: { redirect: true } }} />\r\n                <Row>\r\n                  <NavBar />\r\n                </Row>\r\n                <Row>\r\n                  <TimeSetContext.Provider value={timeSetFunctions}>\r\n                    <Col\r\n                      sm={12}\r\n                      md={{ order: 2 }}\r\n                      className=\"col-md-6 col-lg-9\"\r\n                      style={!mediaQuery.matches ? { height: '90vh' } : null}\r\n                    >\r\n                      <Switch>\r\n                        <Route exact path=\"/\">\r\n                          <ErrorBoundry message=\"Błąd w QuickstartPanel\">\r\n                            <QuickStartPanel\r\n                              {...this.state}\r\n                              fetchFn={this.fetchFromQuickStartPanel}\r\n                            />\r\n                          </ErrorBoundry>\r\n                        </Route>\r\n                        <Route path=\"/session\">\r\n                          <ErrorBoundry message=\"Błąd w Sessions\">\r\n                            {this.state.listOfCycles.length ? (\r\n                              <Redirect to=\"/\" />\r\n                            ) : (\r\n                              <SessionsView />\r\n                            )}\r\n                          </ErrorBoundry>\r\n                        </Route>\r\n                        <Route path=\"/stats\">\r\n                          <ErrorBoundry message=\"Błąd w Stats\">\r\n                            <StatsView />\r\n                          </ErrorBoundry>\r\n                        </Route>\r\n                        <Route path=\"/hydrapp\">\r\n                          <ErrorBoundry message=\"Błąd w Hydrapp\">\r\n                            <HydrappView />\r\n                          </ErrorBoundry>\r\n                        </Route>\r\n                      </Switch>\r\n                    </Col>\r\n                    <Col\r\n                      sm={12}\r\n                      className=\"col-md-6 col-lg-3 rounded overflow-auto\"\r\n                      style={!mediaQuery.matches ? { height: '90vh' } : null}\r\n                    >\r\n                      <ErrorBoundry message=\"Błąd w HistoryPanel\">\r\n                        <HistoryPanel {...this.state} />\r\n                      </ErrorBoundry>\r\n                    </Col>\r\n                  </TimeSetContext.Provider>\r\n                </Row>\r\n              </>\r\n            </BrowserRouter>\r\n          </Container>\r\n        </>\r\n      </React.StrictMode>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './views/RootView/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}